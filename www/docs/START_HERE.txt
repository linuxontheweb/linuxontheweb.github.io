A. After buying a new chromebook:

1) Put it in developer mode by typing: esc + refresh (F3) + power and 
accepting the risks.
2) Go to https://github.com/dnschneid/crouton and follow the installation instructions.
	For example:
	a) Download crouton at https://goo.gl/fd3zc
	b) Type Ctrl+Alt+RightArrow (F2) to get to a terminal in which you can run sudo commands
	c) Login as user: chronos
	d) sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton
	e) Install the chroot with something like
		- sudo crouton -t core -r bookworm
		- sudo crouton -t cli-extra -r <the latest debian stable>
		You should have been prompted to supply a username and a password.
	f) Once installed, the chroot can be entered with: sudo enter-chroot.
		This can be put into a command in /usr/local/bin with "vi":
		vi /usr/local/bin/<somecommand>
		Type: 'i' to enter insert mode.
		Type the line: sudo enter-chroot
		Hit escape, and save the file by typing ':w', then Enter.
		Quit vi by typing ':q', then Enter.
		Make it executable with: sudo chmod +x /usr/local/bin/<somecommand>
		Now just type <somecommand> to enter the chroot.
	g) Inside the chroot, install the ssh server like this:
		sudo apt-get install openssh-server
	h) Start the ssh server like this:
		sudo service ssh start
	i) Go back out to the chromeos gui by typing: Ctrl+Alt+LeftArrow (F1).
	j) Open a chrosh tab with Ctrl+Alt+t
	k) Type "shell" and hit Enter.
	l) Type 'cd' to get into the home directory.
	m) Run the command:
		ssh-keygen
	n) Run the command (you should be prompted for the password):
		ssh-copy-id <username>@localhost
	o) Now you should be able to ssh into your chroot via:
		ssh <username>@localhost
	p) You can make a command for this in the same way as in step f) when
		creating a command to enter the chroot.



	
B. Workflow to create a github repo on a new chromebook

1) Go to github.com
Create github account: <USER>

2) If you want your repo to be statically served at the address:
https://<USER>.github.io, then create a public repo named
<USER>.github.io. (Otherwise, name it anything you want.)
This repo name is <REPO>.

3) Search the web for "gh-cli Linux installation". The webpage may be something
like: https://github.com/cli/cli/blob/trunk/docs/install_linux.md

4) Install the 'gh' command in the chroot by pasting in the relevant command line, which may 
more or less look like the following:

	type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
	curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
	&& sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
	&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
	&& sudo apt update \
	&& sudo apt install gh -y

5) Run these commands

	gh auth login
	git config --global user.email "whatever12345@gmail.com"
	git config --global user.name "Slermerish Yooblex Jankister"
	cd ~/yourproject
	git init
	git branch -m main
	git remote add origin https://github.com/<USER>/<REPO>.git

So a static site repo will look like

	git remote add origin https://github.com/cooluser/cooluser.github.io.git

Otherwise, it will just be:

	git remote add origin https://github.com/myname/coolrepo.git

6) The following commands can be put into a script to automate the syncing of the
remote repo with the local project. 

	cd ~/yourproject 
	git add . 
	git commit -m "Blark" 
	git push -u origin main

7) You may also want Node.js for development purposes (it is necessary for
certain commands in ~/yourproject/bin/ to work). Search for nvm (node version
manager), which may be located at https://github.com/nvm-sh/nvm. Use the 
install command, which may look more or less like:

	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash 

Once installed, get node like this:

	nvm install node

Create a ~/.node folder so that the Node.js packaging system will not clutter your
home directory.

	mkdir ~/.node

Create a frontend script (called 'npi' or something) for npm like this:

	echo 'npm install $@ --prefix ~/.node' > npi
	chmod +x npi

Use it like so:

	./npi some_node_package

8) Edit ~/.bashrc and add the following line:

	export NODE_PATH=~/.node/node_modules


9) In ~/.bashrc: 

Set up aliases like:
	alias nano='nano -x -U -T 4'
	alias c='clear'

Create a simple prompt like:
	PS1='\w$ '

Add whatever paths you need so the system can find your shell scripts:
	PATH=$PATH:~/yourproject/bin

10) Enact the new shell settings like:
	cd
	. .bashrc

