Thursday 11/21/2024: Put _bytes onto the win, in open_file. Then, the new
win_reload calls onloadfile with the bytes after doing await CWIN.reload. Did a
major update to BinView. I added an enterOK option in widgets.popin, which
dokeydown looks for in order to call clickok.


10/16/2024: There is now a "data" file type that exists as an "inline" data «
struture in the 'Nodes' object store of the 'Filesystem' indexedDB database.
For "normal" files, the "value" of a node is a number that references 
a file blob that you can see in chrome at something like (replace the url origin 
part with whatever is appropriate for you):

filesystem:http://localhost:8080/temporary/blobs/

This kind of indirection allows for the usage of a "hard linking" mechanism, and
it also allows us to remove (rm) files from the LOTW filesystem without losing
the actual data.

Now there is a writeDataFile(path, object) function in the fs api that takes 
an object as the second argument that minimally looks like:

let myobj;
myobj = {type: "sometype"}

There *should* also be a value field on your object, like this:
myobj = {type: "sometype", value: [1234, "or whatever"]}

This efficient data storage mechanism is mainly for developers that want to
write to "non-user writable" file system locations (like /var/appdata), which
just means that shell or gui users can't accidently remove/overwrite the data
via "normal" end-user methods.

So, after creating a file like this:
if (!await fsapi.mkDir("/var/appdata/myapp")){
	//Report error
	return;
}
let node = await fsapi.writeDataFile("/var/appdata/myapp/mydata", myobj);
if (!node){
	//Report error
	return;
}

...you can then get the value of the data like:
node.getDataValue() // [1234, "or whatever"]
...or set it like:
node.setDataValue(<new_value>)

And you can get the data type like:
node.getDataType() // "sometype"

It wouldn't make sense to offer a setDataType method, because the types of your
data structures should pretty much be a constant through the life of a given
application (although node.setValue(...) *will* allow you to set the entire data
object, as was done with the writeDataFile example above).
»

9/18/2024: The entire development environment has been moved from a "chroot «
jail" in ChromeOS developer mode (aka crouton) into a non-standard subfolder of
/usr/local within the underlying Linux system (gentoo). This is
/usr/local/home, and the project root is /usr/local/home/lotw.  In the "home
directory," there are symlinks to certain files that are under constant
development. This "home directory" is not recognized by the underlying system
as such, and so configuration files like .bashrc and .vimrc go into the
official home directory at /home/chronos/user.

The package manager is Chromebrew (command lines like "crew install vim" should
get things working fairly nicely).
»

